<?xml version="1.0" encoding="UTF-8"?>
<XMI verified="false" xmi.version="1.2" timestamp="2011-12-15T23:09:15" xmlns:UML="http://schema.omg.org/spec/UML/1.3">
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>umbrello uml modeller http://uml.sf.net</XMI.exporter>
   <XMI.exporterVersion>1.5.8</XMI.exporterVersion>
   <XMI.exporterEncoding>UnicodeUTF8</XMI.exporterEncoding>
  </XMI.documentation>
  <XMI.metamodel xmi.version="1.3" href="UML.xml" xmi.name="UML"/>
 </XMI.header>
 <XMI.content>
  <UML:Model isSpecification="false" isAbstract="false" isLeaf="false" xmi.id="m1" isRoot="false" name="UML Model">
   <UML:Namespace.ownedElement>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="folder" name="folder"/>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="datatype" name="datatype"/>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="constructor" name="constructor"/>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="friend" name="friend"/>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="virtual" name="virtual"/>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Logical View" name="Logical View">
     <UML:Namespace.ownedElement>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Datatypes" name="Datatypes">
       <UML:Namespace.ownedElement>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="29X2MK0BdPB8" name="int"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dktITQqE3IhO" name="char"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="2obYWLVWT2Xn" name="bool"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KXyvuA3VsunK" name="float"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LdYMvElw0KSU" name="double"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ex17xWsF1p8w" name="short"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xCRp4F9Pqgkk" name="long"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uTgsn6MR1LWw" name="unsigned int"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rP9rCHn9TCyW" name="unsigned short"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="P6vGmd0e6eUu" name="unsigned long"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kqJlAohzDqqP" name="string"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uzddfsesbcmQ" comment="This class should be refactored." name="RefactorClass">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="c246hNiX904t"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="4SVGNQiaBC0B" type="2obYWLVWT2Xn" name="m_attri1"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="q5zi4aLjT0a2" type="xCRp4F9Pqgkk" name="m_attri2"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="aKSVXWy1nJRT" type="kqJlAohzDqqP" name="m_attri3"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="aftjU3aZ1IbZ" name="op1"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="J2ct3ADVgj0c" name="op2">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="hufRMg1thHUH" type="2obYWLVWT2Xn"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3bESxsToYlHn" name="BaseRefactorClass">
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="pxsJ6Sh0h5Nw" type="dktITQqE3IhO" name="m_baseAttri1"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="R0ktCYAJ8OnX" type="KXyvuA3VsunK" name="m_baseAttri2"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5LnMR99yogd0" name="baseOp1"/>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1iy8g01YHRDu" name="SubRefactorClass">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="YRXHrey9ERyW"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="SiwnevQRWwKJ" type="2obYWLVWT2Xn" name="m_subAttri1"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="ekV3WuALu2ms" type="xCRp4F9Pqgkk" name="m_subAttri2"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="e4VLvIog1RcU" name="subOp1">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="hruHVYL0rFJd" type="KXyvuA3VsunK"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7bSFp7Aja6fH" name="subOp2">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="vI4XkuVpVw5I" type="2obYWLVWT2Xn"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3F0bJfryWlF1" name="ClassA1">
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="E5gYGxNiIwb4" type="2obYWLVWT2Xn" name="m_attriA11"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gNeyuoGsieXl" name="opA11">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="yq5BvLXkQ5pu" type="2obYWLVWT2Xn"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HZ08oHljZnFJ" name="ClassA2">
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="MFMQ7IJ1YVAy" type="29X2MK0BdPB8" name="m_attriA21"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="jCYh4Lxv3bSp" name="opA21">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="QEdVel6Gq3B7" type="29X2MK0BdPB8"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="E1NJAJfh13mq" name="opA22">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Jk4bMoftzlxK" type="29X2MK0BdPB8"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Sh854P8be7zv" name="opA23">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="xnl4Yrex4HSg" type="29X2MK0BdPB8"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hk8AeDRgRRHi" name="ClassB">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="WtuBW4PLUS6s"/>
        <UML:Generalization xmi.idref="W7Vdo6UifdAF"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="HKEDDFj4R245" type="xCRp4F9Pqgkk" name="m_attriB1"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="SONARmCVrQIA" type="xCRp4F9Pqgkk" name="m_attriB2"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zHcj6ZD63LBs" name="opB1">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="0Wwqa7xrp0Q9" type="xCRp4F9Pqgkk"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="68hbrua8TaEH" name="ClassC1">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="m55EXC6RoXTP"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="Vev1kEJ32Qk6" type="ex17xWsF1p8w" name="m_attriC11"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="sWJX1WDkBcSJ" name="opC11">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="URIASAgmhfIv" type="ex17xWsF1p8w"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rxzOlChQuobZ" name="ClassD">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Jcy67QVZrzw8"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="2liXpCO41dQ9" type="LdYMvElw0KSU" name="m_attriD1"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="VzLH5M2wK5g3" name="opD1">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="OSVqjLpjcKH2" type="LdYMvElw0KSU"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="hk8AeDRgRRHi" xmi.id="WtuBW4PLUS6s" parent="HZ08oHljZnFJ" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="68hbrua8TaEH" xmi.id="m55EXC6RoXTP" parent="hk8AeDRgRRHi" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="rxzOlChQuobZ" xmi.id="Jcy67QVZrzw8" parent="68hbrua8TaEH" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="aW6gdfGRrv03" name="ClassC2">
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="AmoCHQ8G9KZC" type="dktITQqE3IhO" name="m_attriC21"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="s10GUXSxXnEa" name="opC21">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="HmnUMuiqL0yl" type="dktITQqE3IhO"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xOlqjiO3lzmF" name="ClassE">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="lD1NrIogDnkg"/>
        <UML:Generalization xmi.idref="ldBxOtbzBoAW"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="JcrX4WrHrHM9" type="kqJlAohzDqqP" name="m_attriE1"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="o53lry5mlpqI" name="opE1">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="9eVqImjeCCUv" type="kqJlAohzDqqP"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ilfOj9IZhOVZ" name="opE2">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="YHe8ZtApdxJz" type="kqJlAohzDqqP"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="xOlqjiO3lzmF" xmi.id="lD1NrIogDnkg" parent="rxzOlChQuobZ" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="xOlqjiO3lzmF" xmi.id="ldBxOtbzBoAW" parent="aW6gdfGRrv03" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="uzddfsesbcmQ" xmi.id="c246hNiX904t" parent="3bESxsToYlHn" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="1iy8g01YHRDu" xmi.id="YRXHrey9ERyW" parent="uzddfsesbcmQ" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="hk8AeDRgRRHi" xmi.id="W7Vdo6UifdAF" parent="3F0bJfryWlF1" name=""/>
     </UML:Namespace.ownedElement>
     <XMI.extension xmi.extender="umbrello">
      <diagrams>
       <diagram showopsig="1" linecolor="#ff0000" snapx="10" showattribassocs="1" snapy="10" linewidth="0" showattsig="1" isopen="1" showpackage="1" showpubliconly="0" showstereotype="1" name="class diagram for testing RefactoringAssistant" font="Sans Serif,10,-1,0,50,0,0,0,0,0" canvasheight="755" canvaswidth="964" localid="" snapcsgrid="0" showgrid="0" showops="1" griddotcolor="#000000" backgroundcolor="#ffffff" usefillcolor="1" fillcolor="#ffff00" zoom="100" xmi.id="UEZlhjZandST" documentation="" showscope="1" snapgrid="0" showatts="1" type="1">
        <widgets>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="209" showattsigs="601" showstereotype="1" y="260" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="123" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="uzddfsesbcmQ" showscope="1" height="96" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="207" showattsigs="601" showstereotype="1" y="130" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="150" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="3bESxsToYlHn" showscope="1" height="64" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="201" showattsigs="601" showstereotype="1" y="474" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="143" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="1iy8g01YHRDu" showscope="1" height="80" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="558" showattsigs="601" showstereotype="1" y="138" showattributes="1" font="Sans Serif,10,-1,5,75,0,0,0,0,0" width="131" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="3F0bJfryWlF1" showscope="1" height="48" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="751" showattsigs="601" showstereotype="1" y="140" showattributes="1" font="Sans Serif,10,-1,5,75,0,0,0,0,0" width="120" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="HZ08oHljZnFJ" showscope="1" height="80" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="657" showattsigs="601" showstereotype="1" y="282" showattributes="1" font="Sans Serif,10,-1,5,75,0,0,0,0,0" width="123" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="hk8AeDRgRRHi" showscope="1" height="64" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="654" showattsigs="601" showstereotype="1" y="440" showattributes="1" font="Sans Serif,10,-1,5,75,0,0,0,0,0" width="136" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="68hbrua8TaEH" showscope="1" height="48" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="649" showattsigs="601" showstereotype="1" y="577" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="140" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="rxzOlChQuobZ" showscope="1" height="48" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="828" showattsigs="601" showstereotype="1" y="441" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="132" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="aW6gdfGRrv03" showscope="1" height="48" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="744" showattsigs="601" showstereotype="1" y="687" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="131" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="xOlqjiO3lzmF" showscope="1" height="64" showopsigs="601"/>
         <notewidget width="60" showstereotype="1" x="8" noteType="0" y="12" usesdiagramusefillcolor="1" usesdiagramfillcolor="0" isinstance="0" fillcolor="#dcdcdc" height="30" linecolor="#000000" xmi.id="KywOg3FgoxDc" usefillcolor="1" linewidth="none" font="Sans Serif,10,-1,0,50,0,0,0,0,0" text="This class hierarchy is used to test the RefactoringAssistant.&#xa;Created by Andi Fischer.&#xa;Last updated 2008-09-16"/>
        </widgets>
        <messages/>
        <associations>
         <assocwidget indexa="1" indexb="1" widgetaid="uzddfsesbcmQ" linecolor="none" totalcounta="2" xmi.id="c246hNiX904t" widgetbid="3bESxsToYlHn" totalcountb="2" type="500" linewidth="none">
          <linepath>
           <startpoint startx="254" starty="260"/>
           <endpoint endx="254" endy="194"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="1iy8g01YHRDu" linecolor="none" totalcounta="2" xmi.id="YRXHrey9ERyW" widgetbid="uzddfsesbcmQ" totalcountb="2" type="500" linewidth="none">
          <linepath>
           <startpoint startx="259" starty="474"/>
           <endpoint endx="259" endy="356"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="hk8AeDRgRRHi" linecolor="none" totalcounta="3" xmi.id="W7Vdo6UifdAF" widgetbid="3F0bJfryWlF1" totalcountb="2" type="500" linewidth="none">
          <linepath>
           <startpoint startx="657" starty="282"/>
           <endpoint endx="657" endy="186"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="2" indexb="1" widgetaid="hk8AeDRgRRHi" linecolor="none" totalcounta="3" xmi.id="WtuBW4PLUS6s" widgetbid="HZ08oHljZnFJ" totalcountb="2" type="500" linewidth="none">
          <linepath>
           <startpoint startx="751" starty="282"/>
           <endpoint endx="751" endy="220"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="68hbrua8TaEH" linecolor="none" totalcounta="2" xmi.id="m55EXC6RoXTP" widgetbid="hk8AeDRgRRHi" totalcountb="2" type="500" linewidth="none">
          <linepath>
           <startpoint startx="671" starty="440"/>
           <endpoint endx="671" endy="346"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="rxzOlChQuobZ" linecolor="none" totalcounta="2" xmi.id="Jcy67QVZrzw8" widgetbid="68hbrua8TaEH" totalcountb="2" type="500" linewidth="none">
          <linepath>
           <startpoint startx="671" starty="577"/>
           <endpoint endx="671" endy="488"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="xOlqjiO3lzmF" linecolor="none" totalcounta="3" xmi.id="lD1NrIogDnkg" widgetbid="rxzOlChQuobZ" totalcountb="2" type="500" linewidth="none">
          <linepath>
           <startpoint startx="744" starty="687"/>
           <endpoint endx="744" endy="625"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="2" indexb="1" widgetaid="xOlqjiO3lzmF" linecolor="none" totalcounta="3" xmi.id="ldBxOtbzBoAW" widgetbid="aW6gdfGRrv03" totalcountb="2" type="500" linewidth="none">
          <linepath>
           <startpoint startx="831" starty="687"/>
           <endpoint endx="831" endy="489"/>
          </linepath>
         </assocwidget>
        </associations>
       </diagram>
      </diagrams>
     </XMI.extension>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Use Case View" name="Use Case View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Component View" name="Component View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Deployment View" name="Deployment View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Entity Relationship Model" name="Entity Relationship Model">
     <UML:Namespace.ownedElement/>
    </UML:Model>
   </UML:Namespace.ownedElement>
  </UML:Model>
 </XMI.content>
 <XMI.extensions xmi.extender="umbrello">
  <docsettings viewid="UEZlhjZandST" uniqueid="YHe8ZtApdxJz" documentation=""/>
  <listview>
   <listitem open="1" type="800" id="Views">
    <listitem open="1" type="801" id="Logical View">
     <listitem open="0" type="807" id="UEZlhjZandST" label="class diagram for testing RefactoringAssistant"/>
     <listitem open="1" type="813" id="3bESxsToYlHn">
      <listitem open="0" type="814" id="pxsJ6Sh0h5Nw"/>
      <listitem open="0" type="814" id="R0ktCYAJ8OnX"/>
      <listitem open="0" type="815" id="5LnMR99yogd0"/>
     </listitem>
     <listitem open="1" type="813" id="3F0bJfryWlF1">
      <listitem open="0" type="814" id="E5gYGxNiIwb4"/>
      <listitem open="0" type="815" id="gNeyuoGsieXl"/>
     </listitem>
     <listitem open="1" type="813" id="HZ08oHljZnFJ">
      <listitem open="0" type="814" id="MFMQ7IJ1YVAy"/>
      <listitem open="0" type="815" id="jCYh4Lxv3bSp"/>
      <listitem open="0" type="815" id="E1NJAJfh13mq"/>
      <listitem open="0" type="815" id="Sh854P8be7zv"/>
     </listitem>
     <listitem open="1" type="813" id="hk8AeDRgRRHi">
      <listitem open="0" type="814" id="HKEDDFj4R245"/>
      <listitem open="0" type="814" id="SONARmCVrQIA"/>
      <listitem open="0" type="815" id="zHcj6ZD63LBs"/>
     </listitem>
     <listitem open="1" type="813" id="68hbrua8TaEH">
      <listitem open="0" type="814" id="Vev1kEJ32Qk6"/>
      <listitem open="0" type="815" id="sWJX1WDkBcSJ"/>
     </listitem>
     <listitem open="1" type="813" id="aW6gdfGRrv03">
      <listitem open="0" type="814" id="AmoCHQ8G9KZC"/>
      <listitem open="0" type="815" id="s10GUXSxXnEa"/>
     </listitem>
     <listitem open="1" type="813" id="rxzOlChQuobZ">
      <listitem open="0" type="814" id="2liXpCO41dQ9"/>
      <listitem open="0" type="815" id="VzLH5M2wK5g3"/>
     </listitem>
     <listitem open="1" type="813" id="xOlqjiO3lzmF">
      <listitem open="0" type="814" id="JcrX4WrHrHM9"/>
      <listitem open="0" type="815" id="o53lry5mlpqI"/>
      <listitem open="0" type="815" id="ilfOj9IZhOVZ"/>
     </listitem>
     <listitem open="0" type="813" id="uzddfsesbcmQ">
      <listitem open="0" type="814" id="4SVGNQiaBC0B"/>
      <listitem open="0" type="814" id="q5zi4aLjT0a2"/>
      <listitem open="0" type="814" id="aKSVXWy1nJRT"/>
      <listitem open="0" type="815" id="aftjU3aZ1IbZ"/>
      <listitem open="0" type="815" id="J2ct3ADVgj0c"/>
     </listitem>
     <listitem open="1" type="813" id="1iy8g01YHRDu">
      <listitem open="0" type="814" id="SiwnevQRWwKJ"/>
      <listitem open="0" type="814" id="ekV3WuALu2ms"/>
      <listitem open="0" type="815" id="e4VLvIog1RcU"/>
      <listitem open="0" type="815" id="7bSFp7Aja6fH"/>
     </listitem>
     <listitem open="0" type="830" id="Datatypes">
      <listitem open="1" type="829" id="2obYWLVWT2Xn"/>
      <listitem open="1" type="829" id="dktITQqE3IhO"/>
      <listitem open="1" type="829" id="LdYMvElw0KSU"/>
      <listitem open="1" type="829" id="KXyvuA3VsunK"/>
      <listitem open="1" type="829" id="29X2MK0BdPB8"/>
      <listitem open="1" type="829" id="xCRp4F9Pqgkk"/>
      <listitem open="1" type="829" id="ex17xWsF1p8w"/>
      <listitem open="1" type="829" id="kqJlAohzDqqP"/>
      <listitem open="1" type="829" id="uTgsn6MR1LWw"/>
      <listitem open="1" type="829" id="P6vGmd0e6eUu"/>
      <listitem open="1" type="829" id="rP9rCHn9TCyW"/>
     </listitem>
    </listitem>
    <listitem open="1" type="802" id="Use Case View"/>
    <listitem open="1" type="821" id="Component View"/>
    <listitem open="1" type="827" id="Deployment View"/>
    <listitem open="1" type="836" id="Entity Relationship Model"/>
   </listitem>
  </listview>
  <codegeneration>
   <codegenerator language="C++">
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="uzddfsesbcmQ" id="uzddfsesbcmQ" fileName="RefactorClass" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;refactorclass.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors"/>
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Methods"/>
       </header>
       <textblocks>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="4SVGNQiaBC0B" writeOutText="false" classfield_id="4SVGNQiaBC0B" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="4SVGNQiaBC0B" writeOutText="false" classfield_id="4SVGNQiaBC0B" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_2" accessType="0" parent_id="q5zi4aLjT0a2" writeOutText="false" classfield_id="q5zi4aLjT0a2" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_3" accessType="1" parent_id="q5zi4aLjT0a2" writeOutText="false" classfield_id="q5zi4aLjT0a2" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_4" accessType="0" parent_id="aKSVXWy1nJRT" writeOutText="false" classfield_id="aKSVXWy1nJRT" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_5" accessType="1" parent_id="aKSVXWy1nJRT" writeOutText="false" classfield_id="aKSVXWy1nJRT" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_aftjU3aZ1IbZ" parent_id="aftjU3aZ1IbZ" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
        <codeoperation tag="operation_J2ct3ADVgj0c" parent_id="J2ct3ADVgj0c" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RefactorClass.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 18:19:38&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="4SVGNQiaBC0B" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="4SVGNQiaBC0B" indentLevel="1" text="private bool m_attri1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="4SVGNQiaBC0B" writeOutText="false" classfield_id="4SVGNQiaBC0B" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="4SVGNQiaBC0B" writeOutText="false" classfield_id="4SVGNQiaBC0B" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="q5zi4aLjT0a2" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="q5zi4aLjT0a2" indentLevel="1" text="private long m_attri2;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_2" accessType="0" parent_id="q5zi4aLjT0a2" writeOutText="false" classfield_id="q5zi4aLjT0a2" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_3" accessType="1" parent_id="q5zi4aLjT0a2" writeOutText="false" classfield_id="q5zi4aLjT0a2" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="aKSVXWy1nJRT" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="aKSVXWy1nJRT" indentLevel="1" text="private string m_attri3;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_4" accessType="0" parent_id="aKSVXWy1nJRT" writeOutText="false" classfield_id="aKSVXWy1nJRT" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_5" accessType="1" parent_id="aKSVXWy1nJRT" writeOutText="false" classfield_id="aKSVXWy1nJRT" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="3bESxsToYlHn" id="3bESxsToYlHn" fileName="BaseRefactorClass" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;baserefactorclass.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors"/>
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Methods"/>
       </header>
       <textblocks>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="pxsJ6Sh0h5Nw" writeOutText="false" classfield_id="pxsJ6Sh0h5Nw" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="pxsJ6Sh0h5Nw" writeOutText="false" classfield_id="pxsJ6Sh0h5Nw" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_2" accessType="0" parent_id="R0ktCYAJ8OnX" writeOutText="false" classfield_id="R0ktCYAJ8OnX" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_3" accessType="1" parent_id="R0ktCYAJ8OnX" writeOutText="false" classfield_id="R0ktCYAJ8OnX" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_5LnMR99yogd0" parent_id="5LnMR99yogd0" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        BaseRefactorClass.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 18:18:40&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="pxsJ6Sh0h5Nw" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="pxsJ6Sh0h5Nw" indentLevel="1" text="private char m_baseAttri1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="pxsJ6Sh0h5Nw" writeOutText="false" classfield_id="pxsJ6Sh0h5Nw" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="pxsJ6Sh0h5Nw" writeOutText="false" classfield_id="pxsJ6Sh0h5Nw" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="R0ktCYAJ8OnX" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="R0ktCYAJ8OnX" indentLevel="1" text="private float m_baseAttri2;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_2" accessType="0" parent_id="R0ktCYAJ8OnX" writeOutText="false" classfield_id="R0ktCYAJ8OnX" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_3" accessType="1" parent_id="R0ktCYAJ8OnX" writeOutText="false" classfield_id="R0ktCYAJ8OnX" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="1iy8g01YHRDu" id="1iy8g01YHRDu" fileName="SubRefactorClass" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;subrefactorclass.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors"/>
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Methods"/>
       </header>
       <textblocks>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="SiwnevQRWwKJ" writeOutText="false" classfield_id="SiwnevQRWwKJ" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="SiwnevQRWwKJ" writeOutText="false" classfield_id="SiwnevQRWwKJ" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_2" accessType="0" parent_id="ekV3WuALu2ms" writeOutText="false" classfield_id="ekV3WuALu2ms" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_3" accessType="1" parent_id="ekV3WuALu2ms" writeOutText="false" classfield_id="ekV3WuALu2ms" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_e4VLvIog1RcU" parent_id="e4VLvIog1RcU" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
        <codeoperation tag="operation_7bSFp7Aja6fH" parent_id="7bSFp7Aja6fH" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        SubRefactorClass.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 18:19:38&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="SiwnevQRWwKJ" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="SiwnevQRWwKJ" indentLevel="1" text="private bool m_subAttri1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="SiwnevQRWwKJ" writeOutText="false" classfield_id="SiwnevQRWwKJ" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="SiwnevQRWwKJ" writeOutText="false" classfield_id="SiwnevQRWwKJ" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="ekV3WuALu2ms" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="ekV3WuALu2ms" indentLevel="1" text="private long m_subAttri2;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_2" accessType="0" parent_id="ekV3WuALu2ms" writeOutText="false" classfield_id="ekV3WuALu2ms" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_3" accessType="1" parent_id="ekV3WuALu2ms" writeOutText="false" classfield_id="ekV3WuALu2ms" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="3F0bJfryWlF1" id="3F0bJfryWlF1" fileName="ClassA1" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;classa1.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors"/>
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Methods"/>
       </header>
       <textblocks>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="E5gYGxNiIwb4" writeOutText="false" classfield_id="E5gYGxNiIwb4" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="E5gYGxNiIwb4" writeOutText="false" classfield_id="E5gYGxNiIwb4" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_gNeyuoGsieXl" parent_id="gNeyuoGsieXl" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassA1.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 18:26:12&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="E5gYGxNiIwb4" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="E5gYGxNiIwb4" indentLevel="1" text="private bool m_attriA11;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="E5gYGxNiIwb4" writeOutText="false" classfield_id="E5gYGxNiIwb4" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="E5gYGxNiIwb4" writeOutText="false" classfield_id="E5gYGxNiIwb4" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="HZ08oHljZnFJ" id="HZ08oHljZnFJ" fileName="ClassA2" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;classa2.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors"/>
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Methods"/>
       </header>
       <textblocks>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="MFMQ7IJ1YVAy" writeOutText="false" classfield_id="MFMQ7IJ1YVAy" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="MFMQ7IJ1YVAy" writeOutText="false" classfield_id="MFMQ7IJ1YVAy" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_jCYh4Lxv3bSp" parent_id="jCYh4Lxv3bSp" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
        <codeoperation tag="operation_E1NJAJfh13mq" parent_id="E1NJAJfh13mq" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
        <codeoperation tag="operation_Sh854P8be7zv" parent_id="Sh854P8be7zv" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassA2.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:08:32&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="MFMQ7IJ1YVAy" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="MFMQ7IJ1YVAy" indentLevel="1" text="private int m_attriA21;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="MFMQ7IJ1YVAy" writeOutText="false" classfield_id="MFMQ7IJ1YVAy" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="MFMQ7IJ1YVAy" writeOutText="false" classfield_id="MFMQ7IJ1YVAy" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="hk8AeDRgRRHi" id="hk8AeDRgRRHi" fileName="ClassB" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;classb.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors"/>
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Methods"/>
       </header>
       <textblocks>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="HKEDDFj4R245" writeOutText="false" classfield_id="HKEDDFj4R245" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="HKEDDFj4R245" writeOutText="false" classfield_id="HKEDDFj4R245" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_2" accessType="0" parent_id="SONARmCVrQIA" writeOutText="false" classfield_id="SONARmCVrQIA" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_3" accessType="1" parent_id="SONARmCVrQIA" writeOutText="false" classfield_id="SONARmCVrQIA" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_zHcj6ZD63LBs" parent_id="zHcj6ZD63LBs" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassB.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:08:48&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="HKEDDFj4R245" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="HKEDDFj4R245" indentLevel="1" text="private long m_attriB1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="HKEDDFj4R245" writeOutText="false" classfield_id="HKEDDFj4R245" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="HKEDDFj4R245" writeOutText="false" classfield_id="HKEDDFj4R245" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="SONARmCVrQIA" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="SONARmCVrQIA" indentLevel="1" text="private long m_attriB2;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_2" accessType="0" parent_id="SONARmCVrQIA" writeOutText="false" classfield_id="SONARmCVrQIA" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_3" accessType="1" parent_id="SONARmCVrQIA" writeOutText="false" classfield_id="SONARmCVrQIA" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="68hbrua8TaEH" id="68hbrua8TaEH" fileName="ClassC1" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;classc1.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors"/>
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Methods"/>
       </header>
       <textblocks>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="Vev1kEJ32Qk6" writeOutText="false" classfield_id="Vev1kEJ32Qk6" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="Vev1kEJ32Qk6" writeOutText="false" classfield_id="Vev1kEJ32Qk6" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_sWJX1WDkBcSJ" parent_id="sWJX1WDkBcSJ" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassC1.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:10:05&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="Vev1kEJ32Qk6" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="Vev1kEJ32Qk6" indentLevel="1" text="private short m_attriC11;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="Vev1kEJ32Qk6" writeOutText="false" classfield_id="Vev1kEJ32Qk6" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="Vev1kEJ32Qk6" writeOutText="false" classfield_id="Vev1kEJ32Qk6" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="rxzOlChQuobZ" id="rxzOlChQuobZ" fileName="ClassD" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;classd.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors"/>
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Methods"/>
       </header>
       <textblocks>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="2liXpCO41dQ9" writeOutText="false" classfield_id="2liXpCO41dQ9" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="2liXpCO41dQ9" writeOutText="false" classfield_id="2liXpCO41dQ9" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_VzLH5M2wK5g3" parent_id="VzLH5M2wK5g3" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassD.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:09:47&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="2liXpCO41dQ9" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="2liXpCO41dQ9" indentLevel="1" text="private double m_attriD1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="2liXpCO41dQ9" writeOutText="false" classfield_id="2liXpCO41dQ9" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="2liXpCO41dQ9" writeOutText="false" classfield_id="2liXpCO41dQ9" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="aW6gdfGRrv03" id="aW6gdfGRrv03" fileName="ClassC2" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;classc2.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors"/>
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Methods"/>
       </header>
       <textblocks>
        <codeaccessormethod tag="hblock_tag_5" accessType="0" parent_id="AmoCHQ8G9KZC" writeOutText="false" classfield_id="AmoCHQ8G9KZC" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_6" accessType="1" parent_id="AmoCHQ8G9KZC" writeOutText="false" classfield_id="AmoCHQ8G9KZC" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_s10GUXSxXnEa" parent_id="s10GUXSxXnEa" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassC2.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:10:21&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="AmoCHQ8G9KZC" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="AmoCHQ8G9KZC" indentLevel="1" text="private char m_attriC21;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_5" accessType="0" parent_id="AmoCHQ8G9KZC" writeOutText="false" classfield_id="AmoCHQ8G9KZC" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_6" accessType="1" parent_id="AmoCHQ8G9KZC" writeOutText="false" classfield_id="AmoCHQ8G9KZC" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="xOlqjiO3lzmF" id="xOlqjiO3lzmF" fileName="ClassE" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;classe.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors"/>
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Methods"/>
       </header>
       <textblocks>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="JcrX4WrHrHM9" writeOutText="false" classfield_id="JcrX4WrHrHM9" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="JcrX4WrHrHM9" writeOutText="false" classfield_id="JcrX4WrHrHM9" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_o53lry5mlpqI" parent_id="o53lry5mlpqI" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
        <codeoperation tag="operation_ilfOj9IZhOVZ" parent_id="ilfOj9IZhOVZ" canDelete="false">
         <header>
          <cppcodedocumentation tag=""/>
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassE.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:09:24&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="JcrX4WrHrHM9" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="JcrX4WrHrHM9" indentLevel="1" text="private string m_attriE1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="JcrX4WrHrHM9" writeOutText="false" classfield_id="JcrX4WrHrHM9" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="JcrX4WrHrHM9" writeOutText="false" classfield_id="JcrX4WrHrHM9" canDelete="false">
        <header>
         <cppcodedocumentation tag=""/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="uzddfsesbcmQ" id="cppheaderuzddfsesbcmQ" fileName="RefactorClass" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef REFACTORCLASS_H&amp;#010;#define REFACTORCLASS_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;baserefactorclass.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Namespace"/>
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false">
         <header>
          <cppcodedocumentation tag="" writeOutText="false"/>
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //REFACTORCLASS_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RefactorClass.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 18:19:38&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="4SVGNQiaBC0B" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="4SVGNQiaBC0B" indentLevel="1" text=" bool m_attri1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="4SVGNQiaBC0B" writeOutText="false" indentLevel="1" classfield_id="4SVGNQiaBC0B" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_2" accessType="1" parent_id="4SVGNQiaBC0B" writeOutText="false" indentLevel="1" classfield_id="4SVGNQiaBC0B" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="q5zi4aLjT0a2" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="_0" parent_id="q5zi4aLjT0a2" indentLevel="1" text=" long m_attri2;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_3" accessType="0" parent_id="q5zi4aLjT0a2" writeOutText="false" indentLevel="1" classfield_id="q5zi4aLjT0a2" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_4" accessType="1" parent_id="q5zi4aLjT0a2" writeOutText="false" indentLevel="1" classfield_id="q5zi4aLjT0a2" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="aKSVXWy1nJRT" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="_1" parent_id="aKSVXWy1nJRT" indentLevel="1" text=" string m_attri3;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_5" accessType="0" parent_id="aKSVXWy1nJRT" writeOutText="false" indentLevel="1" classfield_id="aKSVXWy1nJRT" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_6" accessType="1" parent_id="aKSVXWy1nJRT" writeOutText="false" indentLevel="1" classfield_id="aKSVXWy1nJRT" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="3bESxsToYlHn" id="cppheader3bESxsToYlHn" fileName="BaseRefactorClass" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef BASEREFACTORCLASS_H&amp;#010;#define BASEREFACTORCLASS_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Namespace"/>
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false">
         <header>
          <cppcodedocumentation tag="" writeOutText="false"/>
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //BASEREFACTORCLASS_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        BaseRefactorClass.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 18:18:40&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="pxsJ6Sh0h5Nw" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="pxsJ6Sh0h5Nw" indentLevel="1" text=" char m_baseAttri1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="pxsJ6Sh0h5Nw" writeOutText="false" indentLevel="1" classfield_id="pxsJ6Sh0h5Nw" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="pxsJ6Sh0h5Nw" writeOutText="false" indentLevel="1" classfield_id="pxsJ6Sh0h5Nw" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="R0ktCYAJ8OnX" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="_2" parent_id="R0ktCYAJ8OnX" indentLevel="1" text=" float m_baseAttri2;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_3" accessType="0" parent_id="R0ktCYAJ8OnX" writeOutText="false" indentLevel="1" classfield_id="R0ktCYAJ8OnX" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_4" accessType="1" parent_id="R0ktCYAJ8OnX" writeOutText="false" indentLevel="1" classfield_id="R0ktCYAJ8OnX" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="1iy8g01YHRDu" id="cppheader1iy8g01YHRDu" fileName="SubRefactorClass" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef SUBREFACTORCLASS_H&amp;#010;#define SUBREFACTORCLASS_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;refactorclass.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Namespace"/>
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false">
         <header>
          <cppcodedocumentation tag="" writeOutText="false"/>
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //SUBREFACTORCLASS_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        SubRefactorClass.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 18:19:38&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="SiwnevQRWwKJ" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="SiwnevQRWwKJ" indentLevel="1" text=" bool m_subAttri1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="SiwnevQRWwKJ" writeOutText="false" indentLevel="1" classfield_id="SiwnevQRWwKJ" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="SiwnevQRWwKJ" writeOutText="false" indentLevel="1" classfield_id="SiwnevQRWwKJ" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="ekV3WuALu2ms" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="_2" parent_id="ekV3WuALu2ms" indentLevel="1" text=" long m_subAttri2;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_3" accessType="0" parent_id="ekV3WuALu2ms" writeOutText="false" indentLevel="1" classfield_id="ekV3WuALu2ms" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_4" accessType="1" parent_id="ekV3WuALu2ms" writeOutText="false" indentLevel="1" classfield_id="ekV3WuALu2ms" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="3F0bJfryWlF1" id="cppheader3F0bJfryWlF1" fileName="ClassA1" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CLASSA1_H&amp;#010;#define CLASSA1_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Namespace"/>
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false">
         <header>
          <cppcodedocumentation tag="" writeOutText="false"/>
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CLASSA1_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassA1.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 18:26:12&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="E5gYGxNiIwb4" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="E5gYGxNiIwb4" indentLevel="1" text=" bool m_attriA11;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="E5gYGxNiIwb4" writeOutText="false" indentLevel="1" classfield_id="E5gYGxNiIwb4" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="E5gYGxNiIwb4" writeOutText="false" indentLevel="1" classfield_id="E5gYGxNiIwb4" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="HZ08oHljZnFJ" id="cppheaderHZ08oHljZnFJ" fileName="ClassA2" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CLASSA2_H&amp;#010;#define CLASSA2_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Namespace"/>
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false">
         <header>
          <cppcodedocumentation tag="" writeOutText="false"/>
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CLASSA2_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassA2.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:08:32&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="MFMQ7IJ1YVAy" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="MFMQ7IJ1YVAy" indentLevel="1" text=" int m_attriA21;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="MFMQ7IJ1YVAy" writeOutText="false" indentLevel="1" classfield_id="MFMQ7IJ1YVAy" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="MFMQ7IJ1YVAy" writeOutText="false" indentLevel="1" classfield_id="MFMQ7IJ1YVAy" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="hk8AeDRgRRHi" id="cppheaderhk8AeDRgRRHi" fileName="ClassB" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CLASSB_H&amp;#010;#define CLASSB_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;classa2.h&quot;&amp;#010;#include &quot;classa1.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Namespace"/>
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false">
         <header>
          <cppcodedocumentation tag="" writeOutText="false"/>
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CLASSB_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassB.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:08:48&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="HKEDDFj4R245" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="HKEDDFj4R245" indentLevel="1" text=" long m_attriB1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="HKEDDFj4R245" writeOutText="false" indentLevel="1" classfield_id="HKEDDFj4R245" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="HKEDDFj4R245" writeOutText="false" indentLevel="1" classfield_id="HKEDDFj4R245" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="SONARmCVrQIA" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="_2" parent_id="SONARmCVrQIA" indentLevel="1" text=" long m_attriB2;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_3" accessType="0" parent_id="SONARmCVrQIA" writeOutText="false" indentLevel="1" classfield_id="SONARmCVrQIA" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_4" accessType="1" parent_id="SONARmCVrQIA" writeOutText="false" indentLevel="1" classfield_id="SONARmCVrQIA" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="68hbrua8TaEH" id="cppheader68hbrua8TaEH" fileName="ClassC1" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CLASSC1_H&amp;#010;#define CLASSC1_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;classb.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Namespace"/>
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false">
         <header>
          <cppcodedocumentation tag="" writeOutText="false"/>
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CLASSC1_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassC1.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:10:05&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="Vev1kEJ32Qk6" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="Vev1kEJ32Qk6" indentLevel="1" text=" short m_attriC11;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="Vev1kEJ32Qk6" writeOutText="false" indentLevel="1" classfield_id="Vev1kEJ32Qk6" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="Vev1kEJ32Qk6" writeOutText="false" indentLevel="1" classfield_id="Vev1kEJ32Qk6" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="rxzOlChQuobZ" id="cppheaderrxzOlChQuobZ" fileName="ClassD" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CLASSD_H&amp;#010;#define CLASSD_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;classc1.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Namespace"/>
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false">
         <header>
          <cppcodedocumentation tag="" writeOutText="false"/>
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CLASSD_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassD.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:09:47&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="2liXpCO41dQ9" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="2liXpCO41dQ9" indentLevel="1" text=" double m_attriD1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="2liXpCO41dQ9" writeOutText="false" indentLevel="1" classfield_id="2liXpCO41dQ9" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="2liXpCO41dQ9" writeOutText="false" indentLevel="1" classfield_id="2liXpCO41dQ9" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="aW6gdfGRrv03" id="cppheaderaW6gdfGRrv03" fileName="ClassC2" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CLASSC2_H&amp;#010;#define CLASSC2_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Namespace"/>
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false">
         <header>
          <cppcodedocumentation tag="" writeOutText="false"/>
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CLASSC2_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassC2.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:10:21&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="AmoCHQ8G9KZC" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="AmoCHQ8G9KZC" indentLevel="1" text=" char m_attriC21;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="AmoCHQ8G9KZC" writeOutText="false" indentLevel="1" classfield_id="AmoCHQ8G9KZC" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="AmoCHQ8G9KZC" writeOutText="false" indentLevel="1" classfield_id="AmoCHQ8G9KZC" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="xOlqjiO3lzmF" id="cppheaderxOlqjiO3lzmF" fileName="ClassE" writeOutCode="true">
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CLASSE_H&amp;#010;#define CLASSE_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;classd.h&quot;&amp;#010;#include &quot;classc2.h&quot;&amp;#010;">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false">
       <header>
        <cppcodedocumentation tag="" text="Namespace"/>
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false">
         <header>
          <cppcodedocumentation tag="" writeOutText="false"/>
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CLASSE_H">
       <header>
        <cppcodedocumentation tag="" writeOutText="false"/>
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        ClassE.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Sep 16 2008 at 20:09:24&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;"/>
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="JcrX4WrHrHM9" writeOutMethods="false" initialValue="">
       <header>
        <cppcodedocumentation tag=""/>
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="JcrX4WrHrHM9" indentLevel="1" text=" string m_attriE1;" canDelete="false">
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1"/>
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="JcrX4WrHrHM9" writeOutText="false" indentLevel="1" classfield_id="JcrX4WrHrHM9" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="JcrX4WrHrHM9" writeOutText="false" indentLevel="1" classfield_id="JcrX4WrHrHM9" canDelete="false">
        <header>
         <cppcodedocumentation tag="" indentLevel="1"/>
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
   </codegenerator>
  </codegeneration>
 </XMI.extensions>
</XMI>
