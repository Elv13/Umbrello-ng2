/* Automatically generated from keywords.table using /home/roberto/src/kdelibs/kjs/create_hash_table. DO NOT EDIT ! */


static const struct HashEntry keywordEntries[] = {
   { "template", Token_template, 0, 0, 0 },
   { "emit", Token_emit, 0, 0, &keywordEntries[88] },
   { "long", Token_long, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "void", Token_void, 0, 0, &keywordEntries[113] },
   { 0, 0, 0, 0, 0 },
   { "explicit", Token_explicit, 0, 0, &keywordEntries[100] },
   { "enum", Token_enum, 0, 0, &keywordEntries[105] },
   { 0, 0, 0, 0, 0 },
   { "continue", Token_continue, 0, 0, &keywordEntries[99] },
   { "k_dcop_signals", Token_k_dcop_signals, 0, 0, &keywordEntries[104] },
   { "auto", Token_auto, 0, 0, &keywordEntries[91] },
   { 0, 0, 0, 0, 0 },
   { "Q_OBJECT", Token_Q_OBJECT, 0, 0, &keywordEntries[86] },
   { "and_eq", Token_and_eq, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "operator", Token_operator, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "class", Token_class, 0, 0, &keywordEntries[90] },
   { 0, 0, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "while", Token_while, 0, 0, 0 },
   { "k_dcop", Token_k_dcop, 0, 0, 0 },
   { "compl", Token_compl, 0, 0, 0 },
   { "bitand", Token_bitand, 0, 0, &keywordEntries[97] },
   { "__int64", Token_int, 0, 0, &keywordEntries[89] },
   { 0, 0, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "bitor", Token_bitor, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "friend", Token_friend, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "signed", Token_signed, 0, 0, 0 },
   { "double", Token_double, 0, 0, 0 },
   { "K_DCOP", Token_K_DCOP, 0, 0, &keywordEntries[111] },
   { "const", Token_const, 0, 0, &keywordEntries[92] },
   { 0, 0, 0, 0, 0 },
   { "inline", Token_inline, 0, 0, &keywordEntries[98] },
   { 0, 0, 0, 0, 0 },
   { "do", Token_do, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "const_cast", Token_const_cast, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "not_eq", Token_not_eq, 0, 0, &keywordEntries[102] },
   { 0, 0, 0, 0, 0 },
   { "static", Token_static, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "throw", Token_throw, 0, 0, 0 },
   { "slots", Token_slots, 0, 0, &keywordEntries[87] },
   { 0, 0, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "static_cast", Token_static_cast, 0, 0, &keywordEntries[115] },
   { "default", Token_default, 0, 0, &keywordEntries[95] },
   { "sizeof", Token_sizeof, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "switch", Token_switch, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "mutable", Token_mutable, 0, 0, 0 },
   { "dynamic_cast", Token_dynamic_cast, 0, 0, 0 },
   { "extern", Token_extern, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "asm", Token_asm, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "signals", Token_signals, 0, 0, &keywordEntries[106] },
   { 0, 0, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "case", Token_case, 0, 0, 0 },
   { "for", Token_for, 0, 0, 0 },
   { "char", Token_char, 0, 0, &keywordEntries[101] },
   { 0, 0, 0, 0, 0 },
   { "export", Token_export, 0, 0, &keywordEntries[94] },
   { "int", Token_int, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "private", Token_private, 0, 0, &keywordEntries[103] },
   { 0, 0, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "not", Token_not, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "else", Token_else, 0, 0, &keywordEntries[93] },
   { 0, 0, 0, 0, 0 },
   { 0, 0, 0, 0, 0 },
   { "bool", Token_bool, 0, 0, 0 },
   { "catch", Token_catch, 0, 0, 0 },
   { "__asm__", Token_asm, 0, 0, 0 },
   { "and", Token_and, 0, 0, 0 },
   { "break", Token_break, 0, 0, &keywordEntries[110] },
   { "delete", Token_delete, 0, 0, 0 },
   { "float", Token_float, 0, 0, &keywordEntries[96] },
   { "goto", Token_goto, 0, 0, 0 },
   { "if", Token_if, 0, 0, 0 },
   { "namespace", Token_namespace, 0, 0, 0 },
   { "new", Token_new, 0, 0, 0 },
   { "or", Token_or, 0, 0, &keywordEntries[107] },
   { "or_eq", Token_or_eq, 0, 0, 0 },
   { "protected", Token_protected, 0, 0, 0 },
   { "public", Token_public, 0, 0, &keywordEntries[109] },
   { "register", Token_register, 0, 0, 0 },
   { "reinterpret_cast", Token_reinterpret_cast, 0, 0, 0 },
   { "return", Token_return, 0, 0, 0 },
   { "short", Token_short, 0, 0, 0 },
   { "struct", Token_struct, 0, 0, 0 },
   { "this", Token_this, 0, 0, 0 },
   { "try", Token_try, 0, 0, &keywordEntries[108] },
   { "typedef", Token_typedef, 0, 0, 0 },
   { "typeid", Token_typeid, 0, 0, 0 },
   { "typename", Token_typename, 0, 0, 0 },
   { "union", Token_union, 0, 0, 0 },
   { "unsigned", Token_unsigned, 0, 0, &keywordEntries[112] },
   { "using", Token_using, 0, 0, 0 },
   { "virtual", Token_virtual, 0, 0, &keywordEntries[114] },
   { "volatile", Token_volatile, 0, 0, 0 },
   { "xor", Token_xor, 0, 0, 0 },
   { "xor_eq", Token_xor_eq, 0, 0, 0 }
};

static const struct HashTable keyword = { 2, 116, keywordEntries, 86 };
